// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using GameStoreBackEndV1.ObjectLogic.ObjectDTOs.Country;
//
//    var countryDto = CountryDto.FromJson(jsonString);

namespace GameStoreBackEndV1.ObjectLogic.ObjectDTOs.Country
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    //https://quicktype.io/
    public partial class CountryDto
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Name Name { get; set; }

        [JsonProperty("tld", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Tld { get; set; }

        [JsonProperty("cca2", NullValueHandling = NullValueHandling.Ignore)]
        public string Cca2 { get; set; }

        [JsonProperty("ccn3", NullValueHandling = NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(ParseStringConverter))]
        public long? Ccn3 { get; set; }

        [JsonProperty("cca3", NullValueHandling = NullValueHandling.Ignore)]
        public string Cca3 { get; set; }

        [JsonProperty("independent", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Independent { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("unMember", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UnMember { get; set; }

        [JsonProperty("currencies", NullValueHandling = NullValueHandling.Ignore)]
        public Currencies Currencies { get; set; }

        [JsonProperty("idd", NullValueHandling = NullValueHandling.Ignore)]
        public Idd Idd { get; set; }

        [JsonProperty("capital", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Capital { get; set; }

        [JsonProperty("altSpellings", NullValueHandling = NullValueHandling.Ignore)]
        public string[] AltSpellings { get; set; }

        [JsonProperty("region", NullValueHandling = NullValueHandling.Ignore)]
        public string Region { get; set; }

        [JsonProperty("languages", NullValueHandling = NullValueHandling.Ignore)]
        public Languages Languages { get; set; }

        [JsonProperty("translations", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, Translation> Translations { get; set; }

        [JsonProperty("latlng", NullValueHandling = NullValueHandling.Ignore)]
        public double[] Latlng { get; set; }

        [JsonProperty("landlocked", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Landlocked { get; set; }

        [JsonProperty("area", NullValueHandling = NullValueHandling.Ignore)]
        public long? Area { get; set; }

        [JsonProperty("demonyms", NullValueHandling = NullValueHandling.Ignore)]
        public Demonyms Demonyms { get; set; }

        [JsonProperty("flag", NullValueHandling = NullValueHandling.Ignore)]
        public string Flag { get; set; }

        [JsonProperty("maps", NullValueHandling = NullValueHandling.Ignore)]
        public Maps Maps { get; set; }

        [JsonProperty("population", NullValueHandling = NullValueHandling.Ignore)]
        public long? Population { get; set; }

        [JsonProperty("car", NullValueHandling = NullValueHandling.Ignore)]
        public Car Car { get; set; }

        [JsonProperty("timezones", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Timezones { get; set; }

        [JsonProperty("continents", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Continents { get; set; }

        [JsonProperty("flags", NullValueHandling = NullValueHandling.Ignore)]
        public Flags Flags { get; set; }

        [JsonProperty("coatOfArms", NullValueHandling = NullValueHandling.Ignore)]
        public CoatOfArms CoatOfArms { get; set; }

        [JsonProperty("startOfWeek", NullValueHandling = NullValueHandling.Ignore)]
        public string StartOfWeek { get; set; }

        [JsonProperty("capitalInfo", NullValueHandling = NullValueHandling.Ignore)]
        public CapitalInfo CapitalInfo { get; set; }
    }

    public partial class CapitalInfo
    {
        [JsonProperty("latlng", NullValueHandling = NullValueHandling.Ignore)]
        public double[] Latlng { get; set; }
    }

    public partial class Car
    {
        [JsonProperty("signs", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Signs { get; set; }

        [JsonProperty("side", NullValueHandling = NullValueHandling.Ignore)]
        public string Side { get; set; }
    }

    public partial class CoatOfArms
    {
    }

    public partial class Currencies
    {
        [JsonProperty("SHP", NullValueHandling = NullValueHandling.Ignore)]
        public Shp Shp { get; set; }
    }

    public partial class Shp
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("symbol", NullValueHandling = NullValueHandling.Ignore)]
        public string Symbol { get; set; }
    }

    public partial class Demonyms
    {
        [JsonProperty("eng", NullValueHandling = NullValueHandling.Ignore)]
        public Eng Eng { get; set; }
    }

    public partial class Eng
    {
        [JsonProperty("f", NullValueHandling = NullValueHandling.Ignore)]
        public string F { get; set; }

        [JsonProperty("m", NullValueHandling = NullValueHandling.Ignore)]
        public string M { get; set; }
    }

    public partial class Flags
    {
        [JsonProperty("png", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Png { get; set; }

        [JsonProperty("svg", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Svg { get; set; }
    }

    public partial class Idd
    {
        [JsonProperty("root", NullValueHandling = NullValueHandling.Ignore)]
        public string Root { get; set; }

        [JsonProperty("suffixes", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Suffixes { get; set; }
    }

    public partial class Languages
    {
        [JsonProperty("eng", NullValueHandling = NullValueHandling.Ignore)]
        public string Eng { get; set; }
    }

    public partial class Maps
    {
        [JsonProperty("googleMaps", NullValueHandling = NullValueHandling.Ignore)]
        public Uri GoogleMaps { get; set; }

        [JsonProperty("openStreetMaps", NullValueHandling = NullValueHandling.Ignore)]
        public Uri OpenStreetMaps { get; set; }
    }

    public partial class Name
    {
        [JsonProperty("common", NullValueHandling = NullValueHandling.Ignore)]
        public string Common { get; set; }

        [JsonProperty("official", NullValueHandling = NullValueHandling.Ignore)]
        public string Official { get; set; }

        [JsonProperty("nativeName", NullValueHandling = NullValueHandling.Ignore)]
        public NativeName NativeName { get; set; }
    }

    public partial class NativeName
    {
        [JsonProperty("eng", NullValueHandling = NullValueHandling.Ignore)]
        public Translation Eng { get; set; }
    }

    public partial class Translation
    {
        [JsonProperty("official", NullValueHandling = NullValueHandling.Ignore)]
        public string Official { get; set; }

        [JsonProperty("common", NullValueHandling = NullValueHandling.Ignore)]
        public string Common { get; set; }
    }

    public partial class CountryDto
    {
        public static CountryDto FromJson(string json) => JsonConvert.DeserializeObject<CountryDto>(json, GameStoreBackEndV1.ObjectLogic.ObjectDTOs.Country.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this CountryDto self) => JsonConvert.SerializeObject(self, GameStoreBackEndV1.ObjectLogic.ObjectDTOs.Country.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
